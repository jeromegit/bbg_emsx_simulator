To implement this application, we will need to create several components. Below are the core classes, functions, and methods necessary for the server and client, along with a brief comment on their purpose:

Server-side:
- `fix_server.py`: The entry point for the FIX server application.
- `fix_application.py`: Implements the QuickFIX Application interface to handle FIX messages.
- `order_manager.py`: Manages the OMS orders, including reading and writing to the CSV file.
- `streamlit_app.py`: The Streamlit application for displaying and editing the OMS orders.
- `oms_orders.csv`: The CSV file containing the fake OMS orders.

Client-side:
- `fix_client.py`: The entry point for the FIX client application.
- `client_application.py`: Implements the QuickFIX Application interface to handle FIX messages for the client.

Common:
- `models.py`: Defines data models and utility functions for the application.
- `settings.py`: Contains configuration settings for the FIX server and client.

Additionally, we will need a `pyproject.toml` file for Poetry to manage dependencies and a `requirements.txt` file for the Python packages.

Let's start by creating the necessary files and implementing the code step by step.

First, we will create the `oms_orders.csv` file with some fake data:

oms_orders.csv
```
order_id,uuid,symbol,side,shares,price
1,1234,AAPL,Buy,100,150.00
2,1234,GOOGL,Sell,50,2500.00
3,1234,AMZN,Buy,30,3100.00
4,5678,TSLA,Sell,20,700.00
5,5678,MSFT,Buy,10,280.00
```

Next, we will create the `pyproject.toml` file for Poetry:

pyproject.toml
```toml
[tool.poetry]
name = "fix-simulator"
version = "0.1.0"
description = "A FIX server and client simulator for Bloomberg IOI Network Indications of Interest & Trade Advertisement Fix Specification."
authors = ["Your Name <your.email@example.com>"]

[tool.poetry.dependencies]
python = "^3.8"
quickfix = "^1.15.1"
pandas = "^1.2.3"
streamlit = "^0.79.0"

[tool.poetry.dev-dependencies]
pytest = "^6.2.2"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
```

Now, let's create the server-side code:

fix_server.py
```python
import quickfix as fix
import sys
from fix_application import FIXApplication
from settings import get_settings

def main(config_file):
    try:
        settings = get_settings(config_file)
        application = FIXApplication()
        storeFactory = fix.FileStoreFactory(settings)
        logFactory = fix.FileLogFactory(settings)
        acceptor = fix.SocketAcceptor(application, storeFactory, settings, logFactory)
        acceptor.start()
        print("FIX Server started.")
        while True:
            time.sleep(1)
    except (fix.ConfigError, Exception) as e:
        print(e)
    finally:
        acceptor.stop()

if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("Usage: fix_server.py <config_file>")
        sys.exit(1)
    main(sys.argv[1])
```

fix_application.py
```python
import quickfix as fix
from order_manager import OrderManager

class FIXApplication(fix.Application):
    def onCreate(self, sessionID):
        self.order_manager = OrderManager()

    def onLogon(self, sessionID):
        print(f"Session {sessionID} logged on.")

    def onLogout(self, sessionID):
        print(f"Session {sessionID} logged out.")

    def toAdmin(self, message, sessionID):
        pass

    def fromAdmin(self, message, sessionID):
        pass

    def toApp(self, message, sessionID):
        pass

    def fromApp(self, message, sessionID):
        self.order_manager.handle_request(message, sessionID)

```

order_manager.py
```python
import quickfix as fix
import pandas as pd
from models import Order

class OrderManager:
    def __init__(self):
        self.orders_df = pd.read_csv('oms_orders.csv')

    def handle_request(self, message, sessionID):
        if message.getHeader().getField(fix.MsgType()) == '6':
            uuid = message.getField(50)
            matching_orders = self.orders_df[self.orders_df['uuid'] == uuid]
            for index, order in matching_orders.iterrows():
                response = self.create_order_message(order)
                fix.Session.sendToTarget(response, sessionID)

    def create_order_message(self, order):
        message = fix.Message()
        message.getHeader().setField(fix.MsgType(fix.MsgType_NewOrderSingle))
        message.setField(fix.Symbol(order['symbol']))
        message.setField(fix.Side('1' if order['side'] == 'Buy' else '2'))
        message.setField(fix.OrderQty(order['shares']))
        message.setField(fix.Price(order['price']))
        message.setField(50, order['uuid'])
        return message

    def save_orders(self):
        self.orders_df.to_csv('oms_orders.csv', index=False)
```

models.py
```python
from dataclasses import dataclass

@dataclass
class Order:
    order_id: int
    uuid: str
    symbol: str
    side: str
    shares: int
    price: float
```

settings.py
```python
import quickfix as fix

def get_settings(config_file):
    settings = fix.SessionSettings(config_file)
    return settings
```

streamlit_app.py
```python
import streamlit as st
import pandas as pd
from order_manager import OrderManager

st.title('OMS Orders Management')

order_manager = OrderManager()
orders_df = order_manager.orders_df

st.dataframe(orders_df)

if st.button('Save Changes'):
    order_manager.save_orders()
    st.success('Orders saved successfully!')
```

Next, we will create the client-side code:

fix_client.py
```python
import quickfix as fix
import sys
from client_application import ClientApplication
from settings import get_settings

def main(config_file):
    try:
        settings = get_settings(config_file)
        application = ClientApplication()
        storeFactory = fix.FileStoreFactory(settings)
        logFactory = fix.FileLogFactory(settings)
        initiator = fix.SocketInitiator(application, storeFactory, settings, logFactory)
        initiator.start()
        print("FIX Client started.")
        while True:
            time.sleep(1)
    except (fix.ConfigError, Exception) as e:
        print(e)
    finally:
        initiator.stop()

if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("Usage: fix_client.py <config_file>")
        sys.exit(1)
    main(sys.argv[1])
```

client_application.py
```python
import quickfix as fix

class ClientApplication(fix.Application):
    def onCreate(self, sessionID):
        pass

    def onLogon(self, sessionID):
        print(f"Session {sessionID} logged on.")
        self.send_ioi_query(sessionID)

    def onLogout(self, sessionID):
        print(f"Session {sessionID} logged out.")

    def toAdmin(self, message, sessionID):
        pass

    def fromAdmin(self, message, sessionID):
        pass

    def toApp(self, message, sessionID):
        pass

    def fromApp(self, message, sessionID):
        print(f"Received message: {message}")

    def send_ioi_query(self, sessionID):
        message = fix.Message()
        header = message.getHeader()
        header.setField(fix.MsgType('6'))  # IOI Query
        message.setField(50, '1234')  # SenderCompID
        fix.Session.sendToTarget(message, sessionID)

```

Finally, we need to create the configuration files for the server and client:

server.cfg
```
[DEFAULT]
ConnectionType=acceptor
ReconnectInterval=20
FileStorePath=store
FileLogPath=log
StartTime=00:00:00
EndTime=00:00:00
UseDataDictionary=Y
DataDictionary=FIX42.xml

[SESSION]
BeginString=FIX.4.2
SenderCompID=FIXSERVER
TargetCompID=FIXCLIENT
SocketAcceptPort=9877
```

client.cfg
```
[DEFAULT]
ConnectionType=initiator
ReconnectInterval=20
FileStorePath=store
FileLogPath=log
StartTime=00:00:00
EndTime=00:00:00
UseDataDictionary=Y
DataDictionary=FIX42.xml

[SESSION]
BeginString=FIX.4.2
SenderCompID=FIXCLIENT
TargetCompID=FIXSERVER
SocketConnectHost=localhost
SocketConnectPort=9877
```

Please note that you will need to have the `FIX42.xml` data dictionary file in the same directory as your configuration files for the FIX protocol to work correctly.

This concludes a fully working implementation.